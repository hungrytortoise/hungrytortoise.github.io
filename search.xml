<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Shadowshocks+Proxifier]]></title>
    <url>%2F2019%2F08%2F13%2Fss-proxifier-bbr%2F</url>
    <content type="text"><![CDATA[说在前面： 本文记录了shadowshocks的搭建过程，以及本地如何绕过白帽子匿名检测的方法。 需要环境： 国外低延迟，高速节点一个。也可以用已有的服务，自己搜索。本文提供的是自己搭建的方法。 推荐用 ：vultr 优点：便宜，性价比高，赶上活动还能送不少使用时长，现在送50刀的活动应该结束了。 节点选择：可以再vultr上根据自己网络环境，测试下载和ping来选择低延迟下载速度快的节点。 系统：选择centos6.4以上的版本 本文以为日本东京的节点为例。 一、Shadowshocks+bbr1234#一键安装版本 没有尝试过（想吃螃蟹的可以尝试下）wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.shchmod +x shadowsocks-all.sh./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log 1、基础配置修改默认22登录端口，防止保利攻破（很重要） 步骤一 12vi /etc/ssh/sshd_config修改默认Port=22 为目标端口 Port=1111 步骤二 1234567防火墙添加端口白名单可以一起将shadow的server端口也加进去firewall-cmd --zone=public --add-port=1111/tcp --permanent#重新载入firewall-cmd --reload#查看白名单端口是否添加成功 （重要）否则关机重启之后没法登录！！！firewall-cmd --zone=public --query-port=1111/tcp 步骤三 12#重启ssh服务systemctl restart sshd.service 2、手动安装shadowsocket 步骤一 123#安装pipcurl https://bootstrap.pypa.io/get-pip.py -o get-pip.pypython get-pip.py 步骤二 12#安装shadowsockspip install shadowsocks 步骤三 123456789101112#配置：vi /etc/shadowsocks.json #添加如下内容 ：&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:1111, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;jizzhut&quot;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;:true #配置bbr加速的时候配置的&#125; 步骤四 1234567891011121314151617#添加系统服务vi /etc/systemd/system/shadowsocks.service#添加如下内容：[Unit]Description=Shadowsocks[Service]TimeoutStartSec=0ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json[Install]WantedBy=multi-user.target#设置开机启动systemctl enable shadowsocks#启动服务systemctl start shadowsocks#查看运行状态systemctl status shadowsocks 二、配置bbr加速（什么是bbr google…）123456789101112131415161718192021222324#tcp加速vim /etc/rc.local# 在最后一行增加以下内容echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen#然后vim /etc/sysctl.conf#在最后一行增加：net.ipv4.tcp_fastopen = 3#编辑配置文件vim /etc/shadowsocks/config.json#添加一项&quot;fast_open&quot;:true#后重启/etc/init.d/shadowsocks restart#bbr安装命令wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh./bbr.sh#检查是否开启bbrsysctl net.ipv4.tcp_available_congestion_controlsysctl net.ipv4.tcp_congestion_controlsysctl net.core.default_qdisclsmod | grep bbr# 返回值有tcp_bbr则说明已经启动 服务端配置到此结束（重启机器即可） 三、配置Proxifier 上述步骤能解决浏览器ss的问题，但是有些在内网环境有过滤规则的白帽子检测，还是不能绕过。这个需要用Proxifier设置代理 下载连接： windows版本 mac版本 步骤一 代理服务器配置：1、ppa三个依次配置2、指定某个程序配置的，代理：可以给被屏蔽的程序带上白帽子。 shadowsock客户端使用就不细说，自己琢磨。 作者的github项目时不时就被q，下面有客户端自取。ios的还没有添加，之后补上。1、各系统客户端下载：压缩好了，安卓，ios，mac 2、Proxifier激活码： 123L6Z8A-XY2J4-BTZ3P-ZZ7DF-A2Q9C（Portable Edition） 5EZ8G-C3WL5-B56YG-SCXM9-6QZAP（Standard Edition） P427L-9Y552-5433E-8DSR3-58Z68（MAC）]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Proxifier</tag>
        <tag>Shadowshocks</tag>
        <tag>白帽子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot引用外部jar如何打包]]></title>
    <url>%2F2019%2F08%2F13%2Fspringboot%E5%A4%96%E9%83%A8jar%E6%89%93%E5%8C%85%2F</url>
    <content type="text"><![CDATA[前言： 用idea本地开发的时候，正常情况下使用maven来用作包管理工具。但是有些时候还是需要引用外部的jar。 一、在本地开发 本地开发只需要再project structure 项目的dependencies 中add进去本地就可以进行正常的开发、编译、测试 二、部署打包&gt; 部署打包到服务器上，不配置的话会提示找不到相应的jarstep1.把jar上传到项目下的某个文件夹下，我的项目结构如下图所示：直接在项目下，新建了一个lib的文件夹 step2.外部jar直接复制进去step3.pom.xml中引入外部jar1234567&lt;dependency&gt;&lt;groupId&gt;com.cloudera&lt;/groupId&gt; 自定义&lt;artifactId&gt;impala&lt;/artifactId&gt; 自定义&lt;version&gt;1.0&lt;/version&gt; 自定义&lt;scope&gt;system&lt;/scope&gt; &lt;systemPath&gt;$&#123;project.basedir&#125;/lib/ImpalaJDBC41.jar&lt;/systemPath&gt;&lt;/dependency&gt; step4.配置build信息，打包的时候将外部jar打包到 jar中，无须再上传到服务器上在指定classpath12345678910111213141516171819202122232425262728293031323334353637383940414243 &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;compilerArguments&gt; &lt;extdirs&gt;$&#123;project.basedir&#125;/lib&lt;/extdirs&gt; &lt;/compilerArguments&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;$&#123;basedir&#125;/src/main/resources&lt;/directory&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;includes&gt; &lt;include&gt;**/application*.properties&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;$&#123;basedir&#125;/src/main/resources&lt;/directory&gt; &lt;excludes&gt; &lt;exclude&gt;**/application*.properties&lt;/exclude&gt; &lt;/excludes&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;lib&lt;/directory&gt; &lt;targetPath&gt;BOOT-INF/lib/&lt;/targetPath&gt; &lt;includes&gt; &lt;include&gt;**/*.jar&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt; 接下来就是正常的打包，引用的外部jar就会在部署的jar内。 以上。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx部署 设置反向代理解决前端访问跨域问题]]></title>
    <url>%2F2019%2F08%2F13%2Fnginx%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[一、nginx的部署 环境 centos6.5 nginx1.7.4 1、下载软件包1wget http://nginx.org/download/nginx-1.10.1.tar.gz 2、解压，进到nginx的根路径配置编译后的木木1./configure --prefix=/app/nginx 3、编译1make&amp;&amp;make install 4、配置12345678910111213141516171819202122232425262728293031到/app/nginx的conf目录下，vim 打开nginx.conf新增如下配置： server &#123; #nginx监听的端口 默认是80 listen 8013; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main;#前端代码解压的dist文件 root /app/web-arts/dist; index index.html index.htm; #配置代理 拦截ip:port:/api的请求转发到 配置的转发地址 location /api &#123; rewrite ^.+api/?(.*)$ /$1 break; # 去除本地接口/api前缀, 否则会出现404 proxy_pass http://192.168.8.8:8012; # 转发地址 &#125; #该配置 解决直接打开ip:port/x/x深层目录的时候找不到页面的错误 location / &#123; try_files $uri $uri/ @router; index index.html; &#125; location @router &#123; rewrite ^.*$ /index.html last; &#125;&#125; 二、前端代码直接打包，放到服务器的指定位置三、启动nginx1234#nginx 启动命令./sbin/nginx #nginx 重新加载配置信息./sbin/nginx -s reload 四、直接访问 ip:port 会自动跳转到dist目录下的index.html文件 可能会遇到的问题： nginx安装的时候需要安装某些依赖包。自行安装即可。 nginx配置修改后，一定要重新加载配置信息，否则配置会不生效 以上]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot+mybatis 多数据源整合]]></title>
    <url>%2F2019%2F08%2F13%2Fspringboot-mybatis%2F</url>
    <content type="text"><![CDATA[1、前言项目需要用到多数据源，看了很多方案。需要读写分离，动态选择数据源的可以用aop的方式来实现。简单的添加多个数据源的方案，可以参考本文。 整合环境： 1234springboot2.0.0mybatis5.6ideamaven 2、配置过程2.1 项目结构 主要配置上图已经圈出来了 2.2 开始配置2.2.1 配置properties文件 123456789101112131415161718192021server.port=8012mybatis.config-locations=classpath:mybatis/mybatis-config.xmlspring.datasource.primary.driver-class-name = com.mysql.jdbc.Driverspring.datasource.primary.jdbc-url = jdbc:mysql://192.168.8.6:3306/data_analyze?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=truespring.datasource.primary.username = rootspring.datasource.primary.password = 123456spring.datasource.test2.driver-class-name = com.mysql.jdbc.Driverspring.datasource.test2.jdbc-url = jdbc:mysql://192.168.8.6:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=truespring.datasource.test2.username = rootspring.datasource.test2.password = 123456#设置日志输入的级别log4j.logger.com.ibatis=DEBUGlog4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUGlog4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUGlog4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUGlog4j.logger.Java.sql.Connection=DEBUGlog4j.logger.java.sql.Statement=DEBUGlog4j.logger.java.sql.PreparedStatement=DEBUG 2.2.2 配置datasource1234567891011121314151617181920212223242526272829@Configuration@MapperScan(basePackages = &quot;com.bojoy.dataservice.mapper.custom&quot;, sqlSessionTemplateRef = &quot;SqlSession2&quot;)public class CustomDataSourceConfig &#123; @Bean(name = &quot;DataSource2&quot;) @ConfigurationProperties(prefix = &quot;spring.datasource.test2&quot;) public DataSource testDataSource() &#123; return DataSourceBuilder.create().build(); &#125; @Bean(name = &quot;SqlSessionFactory2&quot;) public SqlSessionFactory testSqlSessionFactory(@Qualifier(&quot;DataSource2&quot;) DataSource dataSource) throws Exception &#123; SqlSessionFactoryBean bean = new SqlSessionFactoryBean(); bean.setDataSource(dataSource); bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(&quot;classpath:mybatis/mappers/custom/*.xml&quot;)); return bean.getObject(); &#125; @Bean(name = &quot;TransactionManager2&quot;) public DataSourceTransactionManager testTransactionManager(@Qualifier(&quot;DataSource2&quot;) DataSource dataSource) &#123; return new DataSourceTransactionManager(dataSource); &#125; @Bean(name = &quot;SqlSession2&quot;) public SqlSessionTemplate testSqlSessionTemplate(@Qualifier(&quot;SqlSessionFactory2&quot;) SqlSessionFactory sqlSessionFactory) throws Exception &#123; return new SqlSessionTemplate(sqlSessionFactory); &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435#主要查询的库@Configuration// TODO: 2019/2/27 1、修改 MapperScan 2、修改ConfigurationProperties配置@MapperScan(basePackages = &quot;com.bojoy.dataservice.mapper.primary&quot;, sqlSessionTemplateRef = &quot;SqlSession1&quot;)public class PrimaryDataSourceConfig &#123; @Bean(name = &quot;DataSource1&quot;) @ConfigurationProperties(prefix = &quot;spring.datasource.primary&quot;) @Primary public DataSource testDataSource() &#123; return DataSourceBuilder.create().build(); &#125; @Bean(name = &quot;SqlSessionFactory1&quot;) @Primary public SqlSessionFactory testSqlSessionFactory(@Qualifier(&quot;DataSource1&quot;) DataSource dataSource) throws Exception &#123; SqlSessionFactoryBean bean = new SqlSessionFactoryBean(); bean.setDataSource(dataSource); bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(&quot;classpath:mybatis/mappers/primary/*.xml&quot;)); return bean.getObject(); &#125; @Bean(name = &quot;TransactionManager1&quot;) @Primary public DataSourceTransactionManager testTransactionManager(@Qualifier(&quot;DataSource1&quot;) DataSource dataSource) &#123; return new DataSourceTransactionManager(dataSource); &#125; @Bean(name = &quot;SqlSession1&quot;) @Primary public SqlSessionTemplate testSqlSessionTemplate(@Qualifier(&quot;SqlSessionFactory1&quot;) SqlSessionFactory sqlSessionFactory) throws Exception &#123; return new SqlSessionTemplate(sqlSessionFactory); &#125;&#125; 注意点：这边层层注入，需要配置的是xml文件和dao层的路径。必须指定一个primary数据库作为主库 2.2.3 dao层和xml的映射和原本配置一样无须修改2.2.4springboot的启动文件配置12345678910111213package com.bojoy.dataservice;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class DataserviceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DataserviceApplication.class, args); &#125;&#125; 3、整合druid数据库线程池 Step1 需要修改两个数据源的datasource的构造函数： PrimaryDataSourceConfig CustomDataSourceConfig 123public DruidDataSource testDataSource() &#123; return new DruidDataSource(); &#125; Step2 新建过滤器 12345678@WebFilter(filterName = &quot;druidWebStatFilter&quot;, urlPatterns = &quot;/*&quot;, initParams = &#123; @WebInitParam(name = &quot;exclusions&quot;, value = &quot;*.mp4,*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;)// 忽略资源 &#125;)public class DruidFilter extends WebStatFilter &#123;&#125; Step3 修改application.properties文件 123456789101112131415161718192021222324252627282930313233343536#druid连接池#初始化时建立物理连接的个数spring.datasource.druid.initial-size=5#最大连接池数量spring.datasource.druid.max-active=30#最小连接池数量spring.datasource.druid.min-idle=5#获取连接时最大等待时间，单位毫秒spring.datasource.druid.max-wait=60000#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒spring.datasource.druid.time-between-eviction-runs-millis=60000#连接保持空闲而不被驱逐的最小时间spring.datasource.druid.min-evictable-idle-time-millis=300000#用来检测连接是否有效的sql，要求是一个查询语句spring.datasource.druid.validation-query=SELECT 1 FROM DUAL#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。spring.datasource.druid.test-while-idle=true#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。spring.datasource.druid.test-on-borrow=false#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。spring.datasource.druid.test-on-return=false#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。spring.datasource.druid.pool-prepared-statements=true#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。spring.datasource.druid.max-pool-prepared-statement-per-connection-size=50#配置监控统计拦截的filters，去掉后监控界面sql无法统计spring.datasource.druid.filters=stat,wall#通过connectProperties属性来打开mergeSql功能；慢SQL记录spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500#合并多个DruidDataSource的监控数据spring.datasource.druid.use-global-data-source-stat=true#druid连接池监控spring.datasource.druid.stat-view-servlet.login-username=adminspring.datasource.druid.stat-view-servlet.login-password=135246#排除一些静态资源，以提高效率spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/* Step4 springboot启动类上新增@ServletComponentScan注解 over localhost:xxxx/druid 查看监控内容内容 以上会报错： 1234java.lang.IllegalStateException: dbType not support : null, url null获取不到url的配置信息，需要把配置文件 spring.datasource.primary.jdbc-url改成spring.datasource.primary.url 源码参考]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>java</tag>
        <tag>mybatis</tag>
        <tag>数据库</tag>
        <tag>druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[logstash抽取日志到es]]></title>
    <url>%2F2019%2F08%2F13%2Flogstash_es%2F</url>
    <content type="text"><![CDATA[1、logstash抽取日志格式化写入ES中难点：logstash的filter插件的使用2、直接上配置日志信息： 12345672019 - 02 - 22 T15: 28: 19 + 08: 00 hadoop01 nginx: &#123; &quot;realip&quot;: &quot;192.168.0.96&quot;, &quot;@timestamp&quot;: &quot;2019-02-22T15:28:19+08:00&quot;, &quot;host&quot;: &quot;testdgc.bojoy.net&quot;, &quot;request&quot;: &quot;POST /_s.gif HTTP/1.1&quot;, &quot;req_body&quot;: &quot;&#123;\&quot;sender\&quot;:\&quot;server\&quot;,\&quot;project\&quot;:\&quot;cn_xifqz\&quot;,\&quot;server_id\&quot;:\&quot;300010000\&quot;,\&quot;time\&quot;:\&quot;1550820499147\&quot;,\&quot;distinct_id\&quot;:\&quot;76870000\&quot;,\&quot;sdk_info\&quot;:&#123;&#125;,\&quot;event\&quot;:\&quot;login\&quot;,\&quot;properties\&quot;:&#123;\&quot;money_balance\&quot;:19841958,\&quot;role_level\&quot;:311,\&quot;role_imperial\&quot;:8,\&quot;cum_online\&quot;:2674390,\&quot;role_froce\&quot;:8579575,\&quot;voucher_balance\&quot;:11103,\&quot;role_vip\&quot;:12,\&quot;_ip\&quot;:\&quot;221.224.134.178\&quot;&#125;,\&quot;type\&quot;:\&quot;track\&quot;&#125;&quot;&#125; 配置信息： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566input &#123; file &#123; path =&gt; &quot;/tmp/haha.log&quot; start_position =&gt; &quot;beginning&quot; &#125;&#125;filter &#123; grok &#123; match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;WORD:MyWord&#125; nginx:%&#123;GREEDYDATA:request&#125;&quot;&#125; &#125; json&#123; source =&gt; &quot;request&quot; target =&gt; &quot;parsedJson&quot; remove_field=&gt;[&quot;request&quot;] &#125; json&#123; source=&gt;&quot;[parsedJson][req_body]&quot; target=&gt;&quot;secparsebody&quot; #remove_field=&gt;[&quot;parsedJson&quot;] &#125; mutate &#123; add_field=&gt;&#123; &quot;server_id&quot;=&gt;&quot;%&#123;[secparsebody][server_id]&#125;&quot; &quot;sender&quot;=&gt;&quot;%&#123;[secparsebody][sender]&#125;&quot; &quot;time&quot;=&gt;&quot;%&#123;[secparsebody][time]&#125;&quot; &quot;project&quot;=&gt;&quot;%&#123;[secparsebody][project]&#125;&quot; &quot;distinct_id&quot;=&gt;&quot;%&#123;[secparsebody][distinct_id]&#125;&quot; &quot;event&quot;=&gt;&quot;%&#123;[secparsebody][event]&#125;&quot; &quot;type&quot;=&gt;&quot;%&#123;[secparsebody][type]&#125;&quot; &quot;role_level&quot;=&gt;&quot;%&#123;[secparsebody][properties][role_level]&#125;&quot; &quot;voucher_balance&quot;=&gt;&quot;%&#123;[secparsebody][properties][voucher_balance]&#125;&quot; &quot;_ip&quot;=&gt;&quot;%&#123;[secparsebody][properties][_ip]&#125;&quot; &quot;role_imperial&quot;=&gt;&quot;%&#123;[secparsebody][properties][role_imperial]&#125;&quot; &quot;role_vip&quot;=&gt;&quot;%&#123;[secparsebody][properties][role_vip]&#125;&quot; &quot;role_froce&quot;=&gt;&quot;%&#123;[secparsebody][properties][role_froce]&#125;&quot; &quot;cum_online&quot;=&gt;&quot;%&#123;[secparsebody][properties][cum_online]&#125;&quot; &quot;money_balance&quot;=&gt;&quot;%&#123;[secparsebody][properties][money_balance]&#125;&quot; &#125; remove_field=&gt; [&quot;parsedJson&quot;] remove_field=&gt; [&quot;secparsebody&quot;] remove_field=&gt; [&quot;MyWord&quot;] &#125; &#125; output &#123; elasticsearch &#123; hosts =&gt; &quot;192.168.8.7:9200&quot; index =&gt;&quot;log_cn_xifqz&quot; &#125; stdout &#123; codec =&gt; json_lines &#125; &#125; 解析结果: 12345678910111213141516171819202122&#123; &quot;path&quot;: &quot;/tmp/haha.log&quot;, &quot;distinct_id&quot;: &quot;97440000&quot;, &quot;cum_online&quot;: &quot;1939824&quot;, &quot;sender&quot;: &quot;server&quot;, &quot;time&quot;: &quot;1551063482968&quot;, &quot;type&quot;: &quot;track&quot;, &quot;message&quot;: &quot;2019-02-25T10:58:02+08:00 hadoop01 nginx: &#123;\&quot;realip\&quot;:\&quot;192.168.0.96\&quot;,\&quot;@timestamp\&quot;:\&quot;2019-02-25T10:58:02+08:00\&quot;,\&quot;host\&quot;:\&quot;testdgc.bojoy.net\&quot;,\&quot;request\&quot;:\&quot;POST /_s.gif HTTP/1.1\&quot;,\&quot;req_body\&quot;:\&quot;&#123;\\\&quot;sender\\\&quot;:\\\&quot;server\\\&quot;,\\\&quot;project\\\&quot;:\\\&quot;cn_xifqz\\\&quot;,\\\&quot;server_id\\\&quot;:\\\&quot;300010000\\\&quot;,\\\&quot;time\\\&quot;:\\\&quot;1551063482968\\\&quot;,\\\&quot;distinct_id\\\&quot;:\\\&quot;97440000\\\&quot;,\\\&quot;sdk_info\\\&quot;:&#123;&#125;,\\\&quot;event\\\&quot;:\\\&quot;login\\\&quot;,\\\&quot;properties\\\&quot;:&#123;\\\&quot;money_balance\\\&quot;:7430,\\\&quot;role_level\\\&quot;:210,\\\&quot;role_imperial\\\&quot;:8,\\\&quot;cum_online\\\&quot;:1939824,\\\&quot;role_froce\\\&quot;:3404437,\\\&quot;voucher_balance\\\&quot;:12972,\\\&quot;role_vip\\\&quot;:12,\\\&quot;_ip\\\&quot;:\\\&quot;221.224.134.178\\\&quot;&#125;,\\\&quot;type\\\&quot;:\\\&quot;track\\\&quot;&#125;\&quot;&#125;&quot;, &quot;@version&quot;: &quot;1&quot;, &quot;server_id&quot;: &quot;300010000&quot;, &quot;host&quot;: &quot;hadoop01&quot;, &quot;@timestamp&quot;: &quot;2019-02-25T02:58:03.577Z&quot;, &quot;role_froce&quot;: &quot;3404437&quot;, &quot;event&quot;: &quot;login&quot;, &quot;role_level&quot;: &quot;210&quot;, &quot;money_balance&quot;: &quot;7430&quot;, &quot;project&quot;: &quot;cn_xifqz&quot;, &quot;role_vip&quot;: &quot;12&quot;, &quot;voucher_balance&quot;: &quot;12972&quot;, &quot;role_imperial&quot;: &quot;8&quot;, &quot;_ip&quot;: &quot;221.224.134.178&quot;&#125; 3、filter插件参数解释 grok：匹配日志信息，提取字段。（资源消耗比较大，尽量少逻辑操作或者逻辑操作到后面处理） json：解析json，可以解析“{…}”这样带双引号格式的json，json数组、嵌套的json都能解析 mutate：输出参数格式化。一拆多，提取json字段，删除显示的字段等操作 赋值：target=&gt;”secparsebody” 取值：voucher_balance”=&gt;”%{[secparsebody][properties][voucher_balance]} 4、问题：配置文件中不能有中文，哪怕是#注释之后的中文都不可以出现，否则会报错以上。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>logstash</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
</search>
